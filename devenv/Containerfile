# These aren't packages, just low-dependency binaries dropped in /usr/local/bin
# so we can fetch them independently in a separate build.
ARG base=docker.io/library/debian:sid
FROM $base as base
# Life is too short to care about dash
RUN ln -sfr /bin/bash /bin/sh
RUN <<EORUN
set -xeuo pipefail

# Initialize some basic packages
apt -y update && apt -y install curl time bzip2

# Enable deb-src repositories for build-dep
sed -i 's/^deb /deb [arch=amd64] /' /etc/apt/sources.list.d/debian.sources
sed -i 's/^Types: deb$/Types: deb deb-src/' /etc/apt/sources.list.d/debian.sources

# Enable gh CLI repository
mkdir -p -m 755 /etc/apt/keyrings
curl -fLo /etc/apt/keyrings/githubcli-archive-keyring.gpg https://cli.github.com/packages/githubcli-archive-keyring.gpg
chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
mkdir -p -m 755 /etc/apt/sources.list.d
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" > /etc/apt/sources.list.d/github-cli.list

# And re-update after we've fetched repos
apt -y update
EORUN

FROM base as tools
ARG gooseversion=v1.11.1
ARG bcvkversion=v0.5.3
RUN <<EORUN
set -xeuo pipefail
arch=$(arch)

rm -vrf /usr/local/bin/*

# goose for local AI
target=goose-${arch}-unknown-linux-gnu.tar.bz2
/bin/time -f '%E %C' curl -fLO https://github.com/block/goose/releases/download/$gooseversion/$target
tar xvjf $target
mv goose /usr/local/bin/goose

# bcvk
if test "${arch}" = x86_64; then
  td=$(mktemp -d)
  cd $td
  target=bcvk-${arch}-unknown-linux-gnu
  /bin/time -f '%E %C' curl -fLO https://github.com/bootc-dev/bcvk/releases/download/$bcvkversion/${target}.tar.gz
  tar xvzf $target.tar.gz
  mv $target /usr/local/bin/bcvk
  cd -
  rm -rf $td
else
  echo bcvk unavailable for $arch
fi
EORUN

FROM base as rust
RUN <<EORUN
set -xeuo pipefail
# Setup rust; the idea here though is we install system-wide into /usr/local
# as if it was packaged.
export RUSTUP_HOME=/usr/local/rustup
export CARGO_HOME=/usr/local/cargo
# Install Rust system-wide
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile default
# Move binaries to /usr/local/bin (system-managed, root-owned)
mv /usr/local/cargo/bin/* /usr/local/bin/
# Nothing really left here
rm -vrf /usr/local/cargo/bin
EORUN

# This builds the image.
# Build this using `just devenv-build` from the root of the repository.
FROM base
COPY packages.txt build-deps.txt /run/src/
WORKDIR /run/src
RUN <<EORUN
set -xeuo pipefail
grep -vEe '^#' packages.txt | /bin/time -f '%E %C' xargs apt -y install
grep -vEe '^#' build-deps.txt | /bin/time -f '%E %C' xargs apt -y build-dep
apt clean && rm -rf /var/lib/apt/lists/*
EORUN

# Copy in the binaries from our tools container image
COPY --from=tools /usr/local/bin/* /usr/local/bin/
COPY --from=rust /usr/local/bin/* /usr/local/bin/
COPY --from=rust /usr/local/rustup /usr/local/rustup
# Point rustup at the system-wide installation, but let CARGO_HOME default to ~/.cargo
ENV RUSTUP_HOME=/usr/local/rustup
# Setup for codespaces
COPY devenv-init.sh /usr/local/bin/

WORKDIR /
# Create user before declaring volumes so home directory has correct ownership
RUN <<EORUN
set -xeuo pipefail
useradd -m devenv -s /bin/bash
# This needs to be precreated and owned by the devenv user
mkdir -p ~devenv/.local/share/containers
chown -R -h devenv: ~devenv/.local
echo 'devenv ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/devenv && chmod 0440 /etc/sudoers.d/devenv
EORUN
# To avoid overlay-on-overlay with nested containers
VOLUME [ "/var/lib/containers", "/home/devenv/.local/share/containers/" ]
USER devenv
